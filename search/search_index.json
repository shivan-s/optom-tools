{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u26a0\ufe0f Under develepment \u26a0\ufe0f Optom Tools optom-tools are a set of tools for working with data associated in the wonderful world of optometry. Getting Started Install with pip or your other favourite package manager (e.g. pipenv or poetry ). pip install optom-tools Simple Example >>> from optom_tools import Prescription # +1.00 / -2.00 x 180 >>> prescription = Prescription(sphere=1, cylinder=-2, axis=180) >>> prescription.transpose() >>> print(str(prescription)) \"-1.00 / +2.00 x 90\" Other Stuff Under construction","title":"Home"},{"location":"#under-develepment-optom-tools","text":"optom-tools are a set of tools for working with data associated in the wonderful world of optometry.","title":"\u26a0\ufe0f Under develepment \u26a0\ufe0f Optom Tools"},{"location":"#getting-started","text":"Install with pip or your other favourite package manager (e.g. pipenv or poetry ). pip install optom-tools","title":"Getting Started"},{"location":"#simple-example","text":">>> from optom_tools import Prescription # +1.00 / -2.00 x 180 >>> prescription = Prescription(sphere=1, cylinder=-2, axis=180) >>> prescription.transpose() >>> print(str(prescription)) \"-1.00 / +2.00 x 90\"","title":"Simple Example"},{"location":"#other-stuff","text":"Under construction","title":"Other Stuff"},{"location":"prescription/","text":"Prescription Bases: BaseModel The prescription module contains methods to deal with spectacle prescriptions. Examples: Typical use: >>> rx = Prescription ( sphere = 0 , cylinder =- 1 , axis = 180 ) >>> str ( rx ) 'plano / -1.00 x 180' transpose ( flag = None ) Transpose prescription from positive to negative and vice versa. Flags, 'n' and 'p' , can be provided to force a negative or positive cylinder respectively. Parameters: Name Type Description Default (Optional[[Literal[\"n\", \"p\"]] Flag to force negative ('n') and positive ('p') cylindrical format. Defaults to None . required Examples: Transposing a prescription as normal: >>> rx = Prescription ( \"+1.00/-1.00x180\" ) >>> rx . transpose () >>> str ( rx ) \"plano / +1.00 x 90\" >>> rx . transpose () >>> str ( rx ) \"+1.00 / -1.00 x 180\" Transposing a prescription with the 'n' flag: >>> rx = Prescription ( \"+1.00/-1.00x180\" ) . transpose ( 'n' ) >>> str ( rx ) \"+1.00 / -1.00 x 180\" parse ( rx , efficient_parser = False ) Parse a prescription in a more typical format. This is more familiar than setting a prescription using keyword arguments. Parameters: Name Type Description Default rx str The prescription as a string. required efficient_parser bool If set to True , will use the efficient parser as opposed to simple. False Examples: Parsing a simple prescription: >>> rx = Prescription () . parse ( \"+1.00/-1.00x180\" ) >>> rx . transpose () >>> str ( rx ) 'pl / +1.00 x 90' Parsing a 'efficient' prescription: >>> # TODO! >>> # Coming soon.","title":"Prescription"},{"location":"prescription/#prescription","text":"Bases: BaseModel The prescription module contains methods to deal with spectacle prescriptions. Examples: Typical use: >>> rx = Prescription ( sphere = 0 , cylinder =- 1 , axis = 180 ) >>> str ( rx ) 'plano / -1.00 x 180'","title":"Prescription"},{"location":"prescription/#optom_tools.prescription.prescription.Prescription.transpose","text":"Transpose prescription from positive to negative and vice versa. Flags, 'n' and 'p' , can be provided to force a negative or positive cylinder respectively. Parameters: Name Type Description Default (Optional[[Literal[\"n\", \"p\"]] Flag to force negative ('n') and positive ('p') cylindrical format. Defaults to None . required Examples: Transposing a prescription as normal: >>> rx = Prescription ( \"+1.00/-1.00x180\" ) >>> rx . transpose () >>> str ( rx ) \"plano / +1.00 x 90\" >>> rx . transpose () >>> str ( rx ) \"+1.00 / -1.00 x 180\" Transposing a prescription with the 'n' flag: >>> rx = Prescription ( \"+1.00/-1.00x180\" ) . transpose ( 'n' ) >>> str ( rx ) \"+1.00 / -1.00 x 180\"","title":"transpose()"},{"location":"prescription/#optom_tools.prescription.prescription.Prescription.parse","text":"Parse a prescription in a more typical format. This is more familiar than setting a prescription using keyword arguments. Parameters: Name Type Description Default rx str The prescription as a string. required efficient_parser bool If set to True , will use the efficient parser as opposed to simple. False Examples: Parsing a simple prescription: >>> rx = Prescription () . parse ( \"+1.00/-1.00x180\" ) >>> rx . transpose () >>> str ( rx ) 'pl / +1.00 x 90' Parsing a 'efficient' prescription: >>> # TODO! >>> # Coming soon.","title":"parse()"},{"location":"visual_acuity/","text":"Visual Acuity Bases: BaseModel The visual_acuity module contains methods in handling visual acuity measurements. Input for this class can be provided as keyword arguments. However, a string such as '6/6' can be parsed as well. Parameters: Name Type Description Default numerator int The test distance. required denominator int TODO To write required unit Literal [ ft , m ] Takes feet or metres/meters only. Defaults to 'm', but please check examples for nuances. required Examples: Typical use: >>> va = VisualAcuity ( numerator = 6 , denominator = 6 ) >>> str ( va ) '6/6' If you want to explicitly mention the units: >>> va_feet = VisualAcuity ( numerator = 20 , numerator = 20 , unit = \"ft\" ) >>> str ( va_feet ) '20/20' Parsing more familiar input: >>> va_familiar = VisualAcuity ( '6/120' ) >>> va_familiar VisualAcuity(numerator=6.0, denominator=120.0, unit='m') If the numerator is greater 6 , then the unit is assumed to be feet. >>> va_familiar_ft = VisualAcuity ( '20/200' ) >>> va_familiar_ft VisualAcuity(numerator=20.0, denominator=200.0, unit='ft') parse ( va ) Parse a string into a visual acuity. Note: if the test distance (numerator) is greater than 6, then the unit is assumed to be in feet. Parameters: Name Type Description Default va str A visual acuity. required Examples: Parsing a visual acuity: >>> va = VisualAcuity () . parse ( '6/120' ) >>> str ( va ) '6/120' Parsing a visual acuity, automatically turning into a feet: >>> va = VisualAcuity () . parse ( '20/20' ) >>> va . unit 'ft' decimal () property Return decimal form of visual acuity. Returns: Name Type Description Decimal Decimal Decimal form of visual acuity. Examples: Typical use: >>> VisualAcuity ( \"6/12\" ) . decimal 0.5 logmar () property Return logmar value of the visual acuity. Returns: Name Type Description Decimal Decimal Logmar value of the visual acuity. Examples: Typical use: >>> VisualAcuity ( \"6/6\" ) . logmar 0.0","title":"Visual Acuity"},{"location":"visual_acuity/#visual-acuity","text":"Bases: BaseModel The visual_acuity module contains methods in handling visual acuity measurements. Input for this class can be provided as keyword arguments. However, a string such as '6/6' can be parsed as well. Parameters: Name Type Description Default numerator int The test distance. required denominator int TODO To write required unit Literal [ ft , m ] Takes feet or metres/meters only. Defaults to 'm', but please check examples for nuances. required Examples: Typical use: >>> va = VisualAcuity ( numerator = 6 , denominator = 6 ) >>> str ( va ) '6/6' If you want to explicitly mention the units: >>> va_feet = VisualAcuity ( numerator = 20 , numerator = 20 , unit = \"ft\" ) >>> str ( va_feet ) '20/20' Parsing more familiar input: >>> va_familiar = VisualAcuity ( '6/120' ) >>> va_familiar VisualAcuity(numerator=6.0, denominator=120.0, unit='m') If the numerator is greater 6 , then the unit is assumed to be feet. >>> va_familiar_ft = VisualAcuity ( '20/200' ) >>> va_familiar_ft VisualAcuity(numerator=20.0, denominator=200.0, unit='ft')","title":"Visual Acuity"},{"location":"visual_acuity/#optom_tools.visual_acuity.visual_acuity.VisualAcuity.parse","text":"Parse a string into a visual acuity. Note: if the test distance (numerator) is greater than 6, then the unit is assumed to be in feet. Parameters: Name Type Description Default va str A visual acuity. required Examples: Parsing a visual acuity: >>> va = VisualAcuity () . parse ( '6/120' ) >>> str ( va ) '6/120' Parsing a visual acuity, automatically turning into a feet: >>> va = VisualAcuity () . parse ( '20/20' ) >>> va . unit 'ft'","title":"parse()"},{"location":"visual_acuity/#optom_tools.visual_acuity.visual_acuity.VisualAcuity.decimal","text":"Return decimal form of visual acuity. Returns: Name Type Description Decimal Decimal Decimal form of visual acuity. Examples: Typical use: >>> VisualAcuity ( \"6/12\" ) . decimal 0.5","title":"decimal()"},{"location":"visual_acuity/#optom_tools.visual_acuity.visual_acuity.VisualAcuity.logmar","text":"Return logmar value of the visual acuity. Returns: Name Type Description Decimal Decimal Logmar value of the visual acuity. Examples: Typical use: >>> VisualAcuity ( \"6/6\" ) . logmar 0.0","title":"logmar()"}]}